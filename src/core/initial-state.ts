import {
  SENTINEL,
  WHITE,
  BLACK,
  EMPTY_SQUARE,
  ROOK,
  BISHOP,
  QUEEN,
  KING,
  KNIGHT,
  PAWN,
  KING_DIRECTION_KINGSIDE,
  KING_DIRECTION_QUEENSIDE,
  BoardOfColors,
  BoardOfPieces,
  GameState,
  CastlingRights,
} from './globals';

import {
  updatePinnedSquaresAndCheckingVectors,
  computePieceToSquare,
  computeControls,
  computeControlledBy,
} from './change-state';

const boardOfPieces: BoardOfPieces = [
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,

  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  ROOK,
  KNIGHT,
  BISHOP,
  QUEEN,
  KING,
  BISHOP,
  KNIGHT,
  ROOK,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  PAWN,
  PAWN,
  PAWN,
  PAWN,
  PAWN,
  PAWN,
  PAWN,
  PAWN,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,

  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,

  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  PAWN,
  PAWN,
  PAWN,
  PAWN,
  PAWN,
  PAWN,
  PAWN,
  PAWN,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  ROOK,
  KNIGHT,
  BISHOP,
  QUEEN,
  KING,
  BISHOP,
  KNIGHT,
  ROOK,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,

  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
];

// -----------------------------------------------

// FIXME: how to create Int8Array of type SquareOrEmptySqOrSentinel ?
const boardOfColors: BoardOfColors = [
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,

  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  BLACK,
  BLACK,
  BLACK,
  BLACK,
  BLACK,
  BLACK,
  BLACK,
  BLACK,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  BLACK,
  BLACK,
  BLACK,
  BLACK,
  BLACK,
  BLACK,
  BLACK,
  BLACK,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,

  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  EMPTY_SQUARE,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,

  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  WHITE,
  WHITE,
  WHITE,
  WHITE,
  WHITE,
  WHITE,
  WHITE,
  WHITE,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  WHITE,
  WHITE,
  WHITE,
  WHITE,
  WHITE,
  WHITE,
  WHITE,
  WHITE,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,

  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
  SENTINEL,
];

const initialSquareControls = computeControls({ boardOfColors, boardOfPieces });

const initialSquareControlledBy = computeControlledBy({
  squareControls: initialSquareControls,
  boardOfColors,
});

const initialPieceToSquare = computePieceToSquare({
  boardOfColors,
  boardOfPieces,
});

const castlingRights: CastlingRights = {
  [WHITE]: {
    [KING_DIRECTION_QUEENSIDE]: true,
    [KING_DIRECTION_KINGSIDE]: true,
  },
  [BLACK]: {
    [KING_DIRECTION_QUEENSIDE]: true,
    [KING_DIRECTION_KINGSIDE]: true,
  },
};

export const castlingRightsLostWhen = {
  [WHITE]: {
    [KING_DIRECTION_QUEENSIDE]: -1,
    [KING_DIRECTION_KINGSIDE]: -1,
  },
  [BLACK]: {
    [KING_DIRECTION_QUEENSIDE]: -1,
    [KING_DIRECTION_KINGSIDE]: -1,
  },
};

export const initialGameState: GameState =
  updatePinnedSquaresAndCheckingVectors(
    // { currentColor: -1 },
    {
      originSquare: null,
      targetSquare: null,
      // castlingOriginSquare: null,
      // castlingTargetSquare: null,
      enPassantSquare: null,

      // placedPiece: null,
      // moveType: null,

      movesOfOriginSquare: {},
      moveHistory: [],
      moveCounter: 0,

      currentColor: WHITE,
      pinnedSquares: { [WHITE]: {}, [BLACK]: {} },
      pieceToSquares: initialPieceToSquare,

      boardOfPieces,
      boardOfColors,

      squareControls: initialSquareControls,
      squareControlledBy: initialSquareControlledBy,

      isCheck: false,

      checkingSquares: {},

      checkingVectors: {},

      castlingRights,
      castlingRightsLostWhen,

      epds: { 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq -': 1 },

      reasonsForGameOver: {},
      reasonsToPauseGame: {},
      reasonsToAllowDraw: {},

      capturedPieces: {
        [WHITE]: {
          [PAWN]: 0,
          [KNIGHT]: 0,
          [BISHOP]: 0,
          [ROOK]: 0,
          [QUEEN]: 0,
        },
        [BLACK]: {
          [PAWN]: 0,
          [KNIGHT]: 0,
          [BISHOP]: 0,
          [ROOK]: 0,
          [QUEEN]: 0,
        },
      },
    },
  );
